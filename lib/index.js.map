{"version":3,"sources":["../src/index.js"],"names":["scales","major","minor","module","exports","tonic","scale","guitarTuning","tuning","intervals","notes","tonicIndex","findIndex","note","plentyOfNotes","concat","notesInScale","reduce","collection","interval","push","renderedStrings","map","stringRoot","stringRootIndex","stringString","i","currentNoteIndex","currentNote","find","separator","slice","reverse","join"],"mappings":";;AAAA,IAAMA,SAAS;AACbC,SAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,EAAhB,CADM;AAEbC,SAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,EAAhB;AAFM,CAAf;;AAKAC,OAAOC,OAAP,GAAiB,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,YAAxB,EAAsC;AACrD;AACA;AACA;AACA;AACA,MAAMC,SAASD,gBAAgB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAA/B;AACA,MAAME,YAAYT,OAAOM,KAAP,CAAlB;AACA,MAAMI,QAAQ,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,EAAiB,IAAjB,EAAuB,GAAvB,EAA4B,GAA5B,EAAiC,IAAjC,EAAuC,GAAvC,EAA4C,IAA5C,EAAkD,GAAlD,EAAuD,IAAvD,EAA6D,GAA7D,CAAd;AACA,MAAMC,aAAaD,MAAME,SAAN,CAAgB,UAACC,IAAD;AAAA,WAAUA,SAASR,KAAnB;AAAA,GAAhB,CAAnB;AACA,MAAMS,gBAAgBJ,MAAMK,MAAN,CAAaL,KAAb,CAAtB,CATqD,CASV;AAC3C,MAAMM,eAAeP,UAAUQ,MAAV,CAAiB,UAACC,UAAD,EAAaC,QAAb,EAA0B;AAC9DD,eAAWE,IAAX,CAAgBN,cAAcH,aAAaQ,QAA3B,CAAhB;AACA,WAAOD,UAAP;AACD,GAHoB,EAGlB,CAACR,MAAMC,UAAN,CAAD,CAHkB,CAArB;;AAKA,MAAMU,kBAAkBb,OAAOc,GAAP,CAAW,UAACC,UAAD,EAAgB;AACjD,QAAMC,kBAAkBd,MAAME,SAAN,CAAgB,UAACC,IAAD;AAAA,aAAUA,SAASU,UAAnB;AAAA,KAAhB,CAAxB;AACA,QAAIE,eAAe,EAAnB;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,EAApB,EAAwBA,GAAxB,EAA6B;AAC3B,UAAIC,mBAAmBH,kBAAkBE,CAAzC;AACA,UAAIE,cAAcd,cAAca,gBAAd,CAAlB;AACA,UAAIX,aAAaa,IAAb,CAAkB,UAAChB,IAAD;AAAA,eAAUe,gBAAgBf,IAA1B;AAAA,OAAlB,CAAJ,EAAuD;AACrD,YAAIiB,YAAYJ,IAAI,EAAJ,GAAS,IAAT,GAAgB,GAAhC;AACAD,wBAAiBC,IAAII,SAArB;AACD,OAHD,MAGO;AACLL,wBAAgB,KAAhB;AACD;AACF;AACD,WAAUF,UAAV,UAAyBE,YAAzB;AACD,GAduB,CAAxB;AAeA,SAAOJ,gBAAgBU,KAAhB,GAAwBC,OAAxB,GAAkCC,IAAlC,CAAuC,IAAvC,CAAP;AACD,CA/BD","file":"index.js","sourcesContent":["const scales = {\n  major: [2, 4, 5, 7, 9, 11],\n  minor: [2, 3, 5, 7, 8, 10]\n}\n\nmodule.exports = function (tonic, scale, guitarTuning) {\n  // TODO: error handling\n  // - if tonic is not a valid note, yell\n  // - if scale is not in scales yell\n  // - if guitarTUning is passed, and contains a note that is not valid, yell\n  const tuning = guitarTuning || ['E', 'A', 'D', 'G', 'B', 'E'];\n  const intervals = scales[scale];\n  const notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n  const tonicIndex = notes.findIndex((note) => note === tonic);\n  const plentyOfNotes = notes.concat(notes); // lol\n  const notesInScale = intervals.reduce((collection, interval) => {\n    collection.push(plentyOfNotes[tonicIndex + interval])\n    return collection\n  }, [notes[tonicIndex]])\n\n  const renderedStrings = tuning.map((stringRoot) => {\n    const stringRootIndex = notes.findIndex((note) => note === stringRoot);\n    var stringString = '';\n    for (var i = 0; i < 13; i++) {\n      var currentNoteIndex = stringRootIndex + i;\n      var currentNote = plentyOfNotes[currentNoteIndex];\n      if (notesInScale.find((note) => currentNote === note)) {\n        var separator = i < 10 ? '--' : '-';\n        stringString += (i + separator);\n      } else {\n        stringString += '---';\n      }\n    }\n    return `${stringRoot}|-${stringString}|`;\n  })\n  return renderedStrings.slice().reverse().join('\\n');\n}\n"]}